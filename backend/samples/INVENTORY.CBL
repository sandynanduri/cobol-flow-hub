       IDENTIFICATION DIVISION.
       PROGRAM-ID. INVENTORY.
       AUTHOR. COBOL FLOW HUB.
       DATE-WRITTEN. 2025-01-26.
      *
      * INVENTORY MANAGEMENT SYSTEM
      * MANAGES PRODUCT INVENTORY AND STOCK LEVELS
      *
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. IBM-PC.
       OBJECT-COMPUTER. IBM-PC.
       
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT PRODUCT-FILE ASSIGN TO "PRODUCTS.DAT"
               ORGANIZATION IS INDEXED
               ACCESS MODE IS DYNAMIC
               RECORD KEY IS PROD-ID
               FILE STATUS IS WS-PROD-STATUS.

       DATA DIVISION.
       FILE SECTION.
       FD  PRODUCT-FILE.
       01  PRODUCT-RECORD.
           COPY PRODUCT-LAYOUT.

       WORKING-STORAGE SECTION.
       01  WS-FILE-STATUS.
           05  WS-PROD-STATUS      PIC XX.
           
       01  WS-COUNTERS.
           05  WS-RECORDS-READ     PIC 9(6) VALUE 0.
           05  WS-RECORDS-UPDATED  PIC 9(6) VALUE 0.
           05  WS-LOW-STOCK-COUNT  PIC 9(4) VALUE 0.
           
       01  WS-CALCULATION-AREA.
           05  WS-REORDER-QTY      PIC 9(6).
           05  WS-TOTAL-VALUE      PIC 9(9)V99.
           
       COPY INVENTORY-CONSTANTS.

       PROCEDURE DIVISION.
       MAIN-INVENTORY-PROCESS.
           PERFORM INITIALIZATION
           PERFORM INVENTORY-ANALYSIS
           PERFORM GENERATE-REPORTS
           PERFORM TERMINATION
           STOP RUN.

       INITIALIZATION.
           OPEN I-O PRODUCT-FILE
           
           IF WS-PROD-STATUS NOT = '00'
               DISPLAY 'ERROR OPENING PRODUCT FILE: ' WS-PROD-STATUS
               STOP RUN
           END-IF
           
           DISPLAY 'INVENTORY ANALYSIS STARTED'.

       INVENTORY-ANALYSIS.
           PERFORM READ-ALL-PRODUCTS
           PERFORM IDENTIFY-LOW-STOCK
           PERFORM CALCULATE-REORDERS.

       READ-ALL-PRODUCTS.
           MOVE LOW-VALUES TO PROD-ID
           START PRODUCT-FILE KEY NOT < PROD-ID
           
           PERFORM UNTIL WS-PROD-STATUS = '10'
               READ PRODUCT-FILE NEXT RECORD
                   AT END
                       MOVE '10' TO WS-PROD-STATUS
                   NOT AT END
                       ADD 1 TO WS-RECORDS-READ
                       PERFORM ANALYZE-PRODUCT
               END-READ
           END-PERFORM.

       ANALYZE-PRODUCT.
           IF PROD-QTY-ON-HAND < PROD-REORDER-LEVEL
               ADD 1 TO WS-LOW-STOCK-COUNT
               PERFORM MARK-FOR-REORDER
           END-IF
           
           COMPUTE WS-TOTAL-VALUE = 
               PROD-QTY-ON-HAND * PROD-UNIT-COST.

       MARK-FOR-REORDER.
           MOVE 'Y' TO PROD-REORDER-FLAG
           COMPUTE WS-REORDER-QTY = 
               PROD-MAX-STOCK - PROD-QTY-ON-HAND
           MOVE WS-REORDER-QTY TO PROD-REORDER-QTY
           
           REWRITE PRODUCT-RECORD
           ADD 1 TO WS-RECORDS-UPDATED.

       IDENTIFY-LOW-STOCK.
           CALL 'STOCK-ALERT' USING WS-LOW-STOCK-COUNT
           
           IF WS-LOW-STOCK-COUNT > CRITICAL-STOCK-THRESHOLD
               CALL 'URGENT-NOTIFY' USING WS-LOW-STOCK-COUNT
           END-IF.

       CALCULATE-REORDERS.
           CALL 'REORDER-CALC' USING WS-RECORDS-READ WS-REORDER-QTY.

       GENERATE-REPORTS.
           CALL 'PRINT-REPORT' USING 'INVENTORY' WS-RECORDS-READ
           CALL 'EMAIL-SUMMARY' USING WS-LOW-STOCK-COUNT.

       TERMINATION.
           CLOSE PRODUCT-FILE
           
           DISPLAY 'INVENTORY ANALYSIS COMPLETED'
           DISPLAY 'PRODUCTS ANALYZED: ' WS-RECORDS-READ
           DISPLAY 'LOW STOCK ITEMS: ' WS-LOW-STOCK-COUNT
           DISPLAY 'RECORDS UPDATED: ' WS-RECORDS-UPDATED. 